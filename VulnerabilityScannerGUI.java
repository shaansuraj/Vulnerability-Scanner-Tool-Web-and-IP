import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.ExecutionException;

public class VulnerabilityScannerGUI {
    private JFrame frame;
    private JTextArea textArea;
    private JTextField hostField, urlField;
    private JLabel statusLabel;
    private JButton scanButton, webScanButton, saveButton, settingsButton;

    private NetworkScanner networkScanner;
    private VulnerabilityScanner vulnerabilityScanner;

    public VulnerabilityScannerGUI() {
        networkScanner = new NetworkScanner();
        vulnerabilityScanner = new VulnerabilityScanner();
        SwingUtilities.invokeLater(this::createAndShowGUI);
    }

    private void createAndShowGUI() {
        frame = new JFrame("Vulnerability Scanner");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new BorderLayout(10, 10));

        JPanel inputPanel = new JPanel(new GridLayout(2, 1));
        createHostInputPanel(inputPanel);
        createWebInputPanel(inputPanel);
        frame.add(inputPanel, BorderLayout.NORTH);

        createControlButtons();
        createTextArea();
        createStatusLabel();

        frame.pack();
        frame.setLocationRelativeTo(null); // Center on screen
        frame.setVisible(true);
    }
    private void createHostInputPanel(JPanel panel) {
        JPanel hostPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        hostField = new JTextField(15);
        hostPanel.add(new JLabel("Host IP:"));
        hostPanel.add(hostField);
        panel.add(hostPanel);
    }

    private void createWebInputPanel(JPanel panel) {
        JPanel webPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        urlField = new JTextField(20);
        webPanel.add(new JLabel("Web URL:"));
        webPanel.add(urlField);
        panel.add(webPanel);
    }

    private void createControlButtons() {
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        scanButton = new JButton("Scan Host");
        scanButton.addActionListener(this::performScan);
        buttonPanel.add(scanButton);

        webScanButton = new JButton("Scan Web Application");
        webScanButton.addActionListener(this::performWebScan);
        buttonPanel.add(webScanButton);

        saveButton = new JButton("Save Report");
        saveButton.addActionListener(this::saveReport);
        buttonPanel.add(saveButton);

        settingsButton = new JButton("Settings");
        settingsButton.addActionListener(this::openSettings);
        buttonPanel.add(settingsButton);

        frame.add(buttonPanel, BorderLayout.CENTER);
    }

    private void createTextArea() {
        textArea = new JTextArea(20, 50);
        textArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(textArea);
        frame.add(scrollPane, BorderLayout.SOUTH);
    }

    private void createStatusLabel() {
        statusLabel = new JLabel("Status: Idle");
        frame.add(statusLabel, BorderLayout.PAGE_END);
    }

    private void performScan(ActionEvent e) {
        statusLabel.setText("Status: Scanning Host...");
        scanButton.setEnabled(false);

        SwingWorker<List<String>, Void> worker = new SwingWorker<>() {
            @Override
            protected List<String> doInBackground() {
                return networkScanner.scanHost(hostField.getText());
            }

            @Override
            protected void done() {
                try {
                    List<String> openPorts = get();
                    if (openPorts.isEmpty()) {
                        textArea.setText("No open ports found for host: " + hostField.getText());
                    } else {
                        textArea.setText("Host: " + hostField.getText() + "\nOpen Ports:\n");
                        for (String portInfo : openPorts) {
                            textArea.append(portInfo + "\n");
                        }
                    }
                    statusLabel.setText("Status: Scan Complete");
                } catch (InterruptedException | ExecutionException ex) {
                    textArea.setText("Error during scan: " + ex.getMessage());
                    statusLabel.setText("Status: Error");
                } finally {
                    scanButton.setEnabled(true);
                }
            }
        };

        worker.execute();
    }

    private void performWebScan(ActionEvent e) {
        statusLabel.setText("Status: Scanning Web Application...");
        webScanButton.setEnabled(false);

        SwingWorker<List<String>, Void> worker = new SwingWorker<>() {
            @Override
            protected List<String> doInBackground() {
                return vulnerabilityScanner.scanWebApplication(urlField.getText());
            }

            @Override
            protected void done() {
                try {
                    List<String> vulnerabilities = get();
                    if (vulnerabilities.isEmpty()) {
                        textArea.setText("No vulnerabilities found for web application: " + urlField.getText());
                    } else {
                        textArea.setText("Web Application Vulnerabilities for " + urlField.getText() + ":\n");
                        for (String vulnerability : vulnerabilities) {
                            textArea.append(vulnerability + "\n");
                        }
                    }
                    statusLabel.setText("Status: Web Scan Complete");
                } catch (InterruptedException | ExecutionException ex) {
                    textArea.setText("Error during web scan: " + ex.getMessage());
                    statusLabel.setText("Status: Error");
                } finally {
                    webScanButton.setEnabled(true);
                }
            }
        };

        worker.execute();
    }

    private void saveReport(ActionEvent e) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save Report");
        int userSelection = fileChooser.showSaveDialog(frame);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            try (FileWriter writer = new FileWriter(fileToSave)) {
                writer.write(textArea.getText());
                JOptionPane.showMessageDialog(frame, "Report saved to " + fileToSave.getAbsolutePath(), "Report Saved", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(frame, "Error saving report: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void openSettings(ActionEvent e) {
        JDialog settingsDialog = new JDialog(frame, "Scan Settings", true);
        settingsDialog.setLayout(new FlowLayout());
        settingsDialog.setSize(300, 200);

        JTextField startPortField = new JTextField("1", 5);
        JTextField endPortField = new JTextField("65535", 5);

        settingsDialog.add(new JLabel("Start Port:"));
        settingsDialog.add(startPortField);
        settingsDialog.add(new JLabel("End Port:"));
        settingsDialog.add(endPortField);

        JButton saveSettingsButton = new JButton("Save Settings");
        saveSettingsButton.addActionListener(event -> {
            int startPort = Integer.parseInt(startPortField.getText());
            int endPort = Integer.parseInt(endPortField.getText());
            networkScanner.setPortRange(startPort, endPort);
            settingsDialog.dispose();
        });

        settingsDialog.add(saveSettingsButton);
        settingsDialog.setVisible(true);
    }

    public static void main(String[] args) {
       new VulnerabilityScannerGUI();
    }
}
