import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VulnerabilityScanner {
    private Map<String, String> vulnerabilityDatabase;
    private NetworkScanner networkScanner;

    public VulnerabilityScanner() {
        vulnerabilityDatabase = new HashMap<>();
        networkScanner = new NetworkScanner();
        initializeVulnerabilityDatabase();
    }


    private void initializeVulnerabilityDatabase() {
        // Existing vulnerability database entries
        vulnerabilityDatabase.put("21: FTP", "FTP: Potential for unauthorized data access");
        vulnerabilityDatabase.put("22: SSH", "SSH: Possible brute force attack risk");
        vulnerabilityDatabase.put("80: HTTP", "HTTP: Web server vulnerability");
        vulnerabilityDatabase.put("443: HTTPS", "HTTPS: Secure web server vulnerability");
        vulnerabilityDatabase.put("8080: HTTP Alt", "HTTP Alt: Web server vulnerability");
        // Add service version specific vulnerabilities
        vulnerabilityDatabase.put("HTTP: Apache/2.4.29", "CVE-XXXX-XXXX: Security issue in Apache 2.4.29");
        vulnerabilityDatabase.put("SSH: OpenSSH 5.3", "CVE-YYYY-YYYY: Vulnerability in OpenSSH 5.3");
        vulnerabilityDatabase.put("FTP: vsftpd 3.0.3", "CVE-ZZZZ-ZZZZ: Critical security flaw in vsftpd 3.0.3");
        vulnerabilityDatabase.put("HTTP: nginx/1.16.1", "CVE-AAAA-AAAA: Buffer overflow in nginx 1.16.1");
        vulnerabilityDatabase.put("HTTPS: OpenSSL 1.0.2g", "CVE-BBBB-BBBB: Heartbleed vulnerability in OpenSSL 1.0.2g");

        // Web application specific vulnerabilities
        vulnerabilityDatabase.put("Outdated Library: jQuery 2.1.1", "CVE-XXXX-YYYY: Outdated jQuery version, potential XSS vulnerabilities");
        vulnerabilityDatabase.put("Unvalidated Redirect: example.com", "Potential for phishing attacks via unvalidated redirects");
        vulnerabilityDatabase.put("Insecure Direct Object Reference: User Data", "Potential unauthorized access to user data");
    }

    public boolean isPortVulnerable(int port) {
        return vulnerabilityDatabase.containsKey(String.valueOf(port));
    }

    public String getVulnerabilityTip(int port) {
        return vulnerabilityDatabase.getOrDefault(String.valueOf(port), "No specific vulnerability known");
    }

    public List<String> scanForServiceVulnerabilities(List<String> openPortsInfo) {
        List<String> vulnerabilities = new ArrayList<>();
        for (String info : openPortsInfo) {
            String[] parts = info.split(" - "); // Assuming format "host:port - service info"
            if (parts.length > 1) {
                String port = parts[0].split(":")[1].trim();
                String serviceInfo = parts[1].trim();

                // Check for standard port-based vulnerabilities
                if (vulnerabilityDatabase.containsKey(port)) {
                    vulnerabilities.add(info + " - " + vulnerabilityDatabase.get(port));
                }
                // Check for service version specific vulnerabilities
                if (vulnerabilityDatabase.containsKey(serviceInfo)) {
                    vulnerabilities.add(info + " - " + vulnerabilityDatabase.get(serviceInfo));
                }
            }
        }

        // Additional checks for web application specific vulnerabilities
        List<String> webVulnerabilities = scanWebApplicationVulnerabilities();
        vulnerabilities.addAll(webVulnerabilities);

        return vulnerabilities;
    }
    public List<String> scanWebApplication(String url) {
        // Delegates the web scanning to the NetworkScanner
        return networkScanner.scanWebApplication(url);
    }

    private List<String> scanWebApplicationVulnerabilities() {
        List<String> vulnerabilities = new ArrayList<>();
        
        // Example checks for web application vulnerabilities
        // Note: Implement the actual logic to check for these vulnerabilities based on web content
        vulnerabilities.add("Detected: Outdated Library: jQuery 2.1.1 - " + vulnerabilityDatabase.get("Outdated Library: jQuery 2.1.1"));
        vulnerabilities.add("Detected: Unvalidated Redirect: example.com - " + vulnerabilityDatabase.get("Unvalidated Redirect: example.com"));
        vulnerabilities.add("Detected: Insecure Direct Object Reference: User Data - " + vulnerabilityDatabase.get("Insecure Direct Object Reference: User Data"));

        return vulnerabilities;
    }
}
